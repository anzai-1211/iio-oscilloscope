name: Build Windows (MSYS2 MinGW64)

on:
  workflow_dispatch:  # 手動実行のみ

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          path-type: strict
          install: |
            mingw-w64-x86_64-toolchain
            git
            cmake
            ninja
            mingw-w64-x86_64-pkgconf
            mingw-w64-x86_64-gtk3
            mingw-w64-x86_64-glib2
            mingw-w64-x86_64-fftw
            mingw-w64-x86_64-matio
            mingw-w64-x86_64-libxml2
            mingw-w64-x86_64-libzip
            mingw-w64-x86_64-libusb
            mingw-w64-x86_64-zlib

      - name: Build libiio (minimal features)
        shell: msys2 {0}
        env:
          PKG_CONFIG_PATH: /mingw64/lib/pkgconfig
          CMAKE_PREFIX_PATH: /mingw64
        run: |
          set -e
          git clone https://github.com/analogdevicesinc/libiio.git libiio_source
          cd libiio_source
          mkdir build
          cd build
          cmake -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=/mingw64 \
            -DHAVE_DNS_SD=OFF \
            -DWITH_IPV6=OFF \
            -DWITH_USB_BACKEND=OFF \
            ..
          ninja
          ninja install

      - name: Build iio-oscilloscope
        shell: msys2 {0}
        env:
          PKG_CONFIG_PATH: /mingw64/lib/pkgconfig
          CMAKE_PREFIX_PATH: /mingw64
        run: |
          set -e
          mkdir build_oscilloscope
          cd build_oscilloscope
          cmake -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=/mingw64 \
            ..
          ninja
          ninja install

      - name: Package portable bundle (without ntldd)
        shell: msys2 {0}
        run: |
          set -e
          DEST=/c/_pkg/iioosc
          mkdir -p "$DEST/bin" "$DEST/plugins" "$DEST/share/glib-2.0/schemas"

          # 本体EXE
          cp -f /mingw64/bin/iio-oscilloscope.exe "$DEST/"

          # 依存DLL名をobjdumpで抽出してコピー（一次収集）
          for d in $(objdump -p /mingw64/bin/iio-oscilloscope.exe | awk '/DLL Name/ {print $3}'); do
            if [ -f "/mingw64/bin/$d" ]; then
              cp -u "/mingw64/bin/$d" "$DEST/bin/" || true
            fi
          done

          # よく使うGTK/GLib等のDLLを追加収集（不足防止）
          for pat in \
            libgtk-3*.dll libgdk-3*.dll libglib-2.0*.dll libgobject-2.0*.dll libgio-2.0*.dll \
            libpango-1.0*.dll libpangocairo-1.0*.dll libcairo*.dll libatk-1.0*.dll \
            libfontconfig*.dll libfreetype*.dll libintl-8.dll zlib1.dll libwinpthread-1.dll \
            libiio*.dll libfftw3*.dll libxml2*.dll libmatio*.dll libusb-1.0*.dll
          do
            for f in /mingw64/bin/$pat; do
              if [ -f "$f" ]; then
                cp -u "$f" "$DEST/bin/" || true
              fi
            done
          done

          # プラグインDLL（あなたのCMake設定でインストールされるもの）
          if [ -d /mingw64/bin/plugins ]; then
            cp -r /mingw64/bin/plugins/* "$DEST/plugins/" || true
          fi

          # GTKのスキーマ
          cp -r /mingw64/share/glib-2.0/schemas/*.xml "$DEST/share/glib-2.0/schemas/" || true
          glib-compile-schemas "$DEST/share/glib-2.0/schemas" || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: iio-oscilloscope-portable
          path: |
            C:\_pkg\iioosc\
